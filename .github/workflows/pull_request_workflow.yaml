name: Pull Request Workflow

concurrency:
  group: pull_request-${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    paths:
      - 'apps/**'
      - 'packages/**'

jobs:
  determine-changes:
    name: Determine Changed Projects
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-changes.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all commits to ensure the base commit is available

      - name: Get changed projects and dependencies
        id: set-changes
        run: |
          # Define a dependency map
          declare -A dependency_map
          dependency_map["packages/naive_cross_word"]="apps/teka_teki_tiku"
          dependency_map["packages/teka_tecore"]="apps/teka_teki_tiku apps/kakiku_admin"
          dependency_map["packages/teka_tekit"]="apps/kakiku_admin"

          # Identify changed projects
          changed_projects=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} \
            | grep -E '^(apps|packages)/' | cut -d'/' -f1-2 | sort | uniq)

          # Include dependent projects
          affected_projects=""
          for project in $changed_projects; do
            affected_projects+="$project "
            if [[ -v dependency_map[$project] ]]; then
              affected_projects+="${dependency_map[$project]} "
            fi
          done

          # Set output
          affected_projects_json=$(echo $affected_projects | tr ' ' '\n' | sort | uniq | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=projects::$affected_projects_json"

      - name: Debug Output
        run: |
          echo "Affected Projects: ${{ steps.set-changes.outputs.projects }}"

  build:
    name: Build, Test, Analyze and Upload Coverage
    needs: determine-changes
    if: needs.determine-changes.outputs.projects != '[]' # Skip if no projects are changed
    strategy:
      matrix:
        project: ${{ fromJson(needs.determine-changes.outputs.projects) }}
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/flutter_package.yml@v1
    with:
      flutter_channel: stable
      working_directory: ${{ matrix.project }}
      format_line_length: '160'
      flutter_version: '3.19.6'
      min_coverage: 60

  comment-coverage:
    name: Comment Coverage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage-${{ matrix.project }}
          path: coverage-artifacts

      - name: Parse Coverage
        id: parse-coverage
        run: |
          mkdir -p coverage-summaries
          total_coverage=()
          for file in $(find coverage-artifacts -name "lcov.info"); do
            coverage=$(grep -oP 'LF:\d+\nLH:\d+' $file | awk -F: '
              { total_lines += $2 }
              NR % 2 == 0 { total_hit_lines += $2 }
              END { if (total_lines > 0) printf "%.2f", (total_hit_lines / total_lines) * 100 }
            ')
            total_coverage+=("$file:$coverage")
            echo "$file: $coverage%" >> coverage-summaries/summary.txt
          done

          # Prepare JSON for comment
          coverage_json=$(printf '%s\n' "${total_coverage[@]}" | jq -R -s -c 'split("\n")[:-1]')
          echo "total_coverage=$coverage_json" >> $GITHUB_ENV

      - name: Debug Coverage
        run: |
          echo "Coverage summary: ${{ env.total_coverage }}"

      - name: Post Coverage to Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const coverageData = process.env.total_coverage;
            if (!coverageData) {
              console.log('No coverage data available.');
              return;
            }

            const parsedCoverage = JSON.parse(coverageData);
            const coverageComment = `### ðŸ›  Code Coverage Results\n\n` +
              parsedCoverage.map(entry => {
                const [file, percentage] = entry.split(':');
                return `- **${file.replace('coverage-artifacts/', '')}**: ${percentage}%`;
              }).join('\n') +
              `\n\n_This comment was generated by a GitHub Action._`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: coverageComment
            });
